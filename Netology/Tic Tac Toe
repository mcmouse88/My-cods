package com.company;

import java.util.Scanner;

public class Main {
    public static final int SIZE = 5;
    public static final char EMPTY = '-';
    public static final char CROSS = 'X';
    public static final char ZERO = '0';

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        char[][] field = new char[SIZE][SIZE];
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                field[i][j] = EMPTY;
            }
        }
        boolean isCrossTurn = true;
        while (true) {
            try {
                printField(field);
                System.out.println("Ходят " + (isCrossTurn ? "крестики" : "нолики") + "!");
                String input = scanner.nextLine(); // "1 3"
                String[] parts = input.split("\\s"); // ["1", "3"]
                int r = Integer.parseInt(parts[0]) - 1;
                int c = Integer.parseInt(parts[1]) - 1;

                if (field[r][c] != EMPTY) {
                    System.out.println("Сюда ходить нельзя");
                    continue;
                }
                field[r][c] = isCrossTurn ? CROSS : ZERO;
                if (isWin(field, isCrossTurn ? CROSS : ZERO)) {
                    System.out.println("Победили " + (isCrossTurn ? "крестики" : "нолики") + "!");
                    printField(field);
                    break;
                } else {
                    isCrossTurn = !isCrossTurn;
                }
            } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {
                System.out.println("Вы ввели информацию в неверном формате");
                continue;
            }
        }
    }

    public static void printField(char[][] field) {
        for (char[] row : field) {
            for (char cell : row) {
                System.out.print(cell + " ");
            }
            System.out.println();
        }
    }

    public static boolean isWin(char[][] field, char player) {
        int count = 0;
        return isVertical(field, player, count) || isRow(field, player, count) || isColumn(field, player, count);
    }

    public static boolean isVertical(char[][] field, char player, int count) {
        for (int row = 0; row < SIZE; row++) {
            if (field[row][row] == player) {
                count++;
            }
            if (count == SIZE) {
                return true;
            }
        }
        count = 0;
        for (int row = 0; row < SIZE; row++) {
            if (field[row][SIZE - row - 1] == player) {
                count++;
            }
            if (count == SIZE) {
                return true;
            }
        }
        count = 0;
        return false;
    }

    public static boolean isRow(char[][] field, char player, int count) {
        for (int row = 0; row < SIZE; row++) {
            for (int i = 0; i < SIZE; i++) {
                if (field[row][i] == player) {
                    count++;
                }
                if (count == SIZE) {
                    return true;
                }
            }
            count = 0;
        }
        return false;
    }

    public static boolean isColumn(char[][] field, char player, int count) {
        for (int row = 0; row < SIZE; row++) {
            for (int i = 0; i < SIZE; i++) {
                if (field[i][row] == player) {
                    count++;
                }
                if (count == SIZE) {
                    return true;
                }
            }
            count = 0;
        }
        return false;
    }
}
